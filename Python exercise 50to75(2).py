{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<!DOCTYPE html>\n",
      "<!--[if IE 7]>\n",
      "<html class=\"ie ie7 no-js\" lang=\"en-US\">\n",
      "<![endif]-->\n",
      "<!--[if IE 8]>\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    " \n",
    "headers = {'User-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0'}\n",
    "r = requests.get(\"http://www.pythonhow.com\", headers = headers)\n",
    "print(r.text[:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<head><title>Not Acceptable!</title></head><body><h1>Not Acceptable!</h1><p>An appropriate representation of the requested resource could not be found on this server. This error was generated by Mod_Security.</p></body></html>\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "headers = {'User-agent': 'Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:61.0) Gecko/20100101 Firefox/61.0'}\n",
    "r = requests.get(\"http://www.pythonhow.com/data/universe.txt\")\n",
    "txt = r.text\n",
    "print(txt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Distant regions of space are assumed to exist and to be part of reality as much as we are, even though we can never interact with them. The spatial region that we can affect and be affected by is the observable universe. The observable universe depends on the location of the observer. By traveling, an observer can come into contact with a greater region of spacetime than an observer who remains still. Nevertheless, even the most rapid traveler will not be able to interact with all of space. Typically, the observable universe is taken to mean the portion of the Universe that is observable from our vantage point in the Milky Way.\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "response = requests.get(\"http://www.pythonhow.com/data/universe.txt\", headers = {'user-agent': 'customUserAgent'})\n",
    "text = response.text\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import requests\n",
    "response = requests.get(\"http://www.pythonhow.com/data/universe.txt\", headers = {'user-agent': 'customUserAgent'})\n",
    "text = response.text\n",
    "text.count(\"a\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Input your query:  tomato\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import webbrowser\n",
    " \n",
    "query = input(\"Input your query: \")\n",
    "webbrowser.open(\"https://google.com/search?q=%s\" % query)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x,y\n",
      "3,5\n",
      "4,9\n",
      "6,10\n",
      "7,11\n",
      "8,12\n"
     ]
    }
   ],
   "source": [
    "import requests\n",
    "response = requests.get(\"http://www.pythonhow.com/data/sampledata.txt\", headers = {'user-agent': 'customUserAgent'})\n",
    "text = response.text\n",
    "print(text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas\n",
    " \n",
    "data = pandas.read_csv(\"http://www.pythonhow.com/data/sampledata.txt\")\n",
    "data_2 = data * 2\n",
    "data_2.to_csv(\"sampledata_x_2.txt\", index=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    " \n",
    "data = pd.read_csv(\"http://www.pythonhow.com/data/sampledata.txt\")\n",
    "data2 = pd.read_csv(\"http://pythonhow.com/data/sampledata_x_2.txt\")\n",
    "\n",
    "data3 = pd.concat([data, data2])\n",
    "data3.to_csv(\"sampledata_x_3.txt\", index= None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    " \n",
    "data = pd.read_csv(\"http://www.pythonhow.com/data/sampledata.txt\")\n",
    "data.plot(kind='scatter', x='x', y='y', color = 'red')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
